{
  "name": "dictionaryjs",
  "version": "0.0.8",
  "description": "A simple dictionary wrapper for JavaScript objects providing associative array functionality and helpful methods. Methods include: get, set, getDefault, remove, has, size, empty, asyncEmpty, forEach, and asyncForEach.",
  "main": "dictionaryjs",
  "dependencies": {},
  "devDependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/phanxgames/dictionaryjs.git"
  },
  "keywords": [
    "dictionary",
    "associative array",
    "key-value",
    "data structure",
    "async",
    "foreach",
    "remove",
    "object",
    "foreach",
    "empty"
  ],
  "readme": "dictionaryjs\r\n=================\r\n\r\n### Features\r\n\r\n* Get and Set entries as key/value pairs\r\n* GetDefault method with default value if value is not found\r\n* Remove key from dictionary\r\n* Get length of dictionary\r\n* Built-in forEach and asyncForEach loops\r\n* Ability to break forEach and asyncForEach loops\r\n* asyncForEach now has a end callback which will be called once the loop is complete\r\n* Empty and asyncEmpty to clear all entries from dictionary\r\n\r\n### Change Log\r\n\r\n0.0.8\r\n* Improved the forEach loop to not use a seperate array for keys.\r\n* Added Empty and asyncEmpty to quickly remove all entries from the dictionary.\r\n\r\n\r\n# API\r\n\r\n### Setup\r\nTo use simply include at the top of your script:\r\n<pre>\r\nvar Dictionary = require('dictionaryjs');\r\n\r\nvar dict = new Dictionary();\r\n</pre>\r\n\r\n\r\n### Set\r\nTo store a key provide the key as a string and the value can be any data type.\r\n<pre>\r\ndict.set(\"key\",value);\r\n</pre>\r\n\r\n\r\n### Get\r\nGet the value of a key.\r\n<pre>\r\ndict.get(\"key\");\r\n</pre>\r\n\r\n\r\n### Get Default\r\nGet the value of a key or return the default value.\r\n<pre>\r\ndict.getDefault(\"key\",default);\r\n</pre>\r\nIf key is not contained within dictionary then the default value will be returned.\r\n\r\n\r\n### Remove\r\nRemove a key.\r\n<pre>\r\ndict.remove(\"key\");\r\n</pre>\r\n\r\n\r\n### Size\r\nDetermine how many keys are in the dictionary, returns an integer.\r\n<pre>\r\ndict.size();\r\n</pre>\r\n\r\n\r\n### Has\r\nCheck if key is in the dictionary, returns boolean.\r\n<pre>\r\ndict.has(\"key\");\r\n</pre>\r\n\r\n\r\n### Empty\r\nRemoves all dictionary entries. This method is blocking.\r\n<pre>\r\ndict.empty();\r\n</pre>\r\n\r\n\r\n### Async Empty\r\nRemoves all dictionary entries. This method is non-blocking.\r\n<pre>\r\ndict.asyncEmpty(function() {\r\n  //called after dictionary has been emptied\r\n});\r\n</pre>\r\n\r\n\r\n### For Each\r\nTo loop over each entry in the dictionary use:\r\n<pre>\r\ndict.forEach(function(key,value) {\r\n  //returns key and value of each\r\n});\r\n</pre>\r\n\r\nTo break and end looping:\r\n<pre>\r\ndict.forEach(function(key,value) {\r\n  if (..logic..) return false;\r\n});\r\n</pre>\r\n\r\n\r\n### Async For Each\r\nTo loop over each entry in a non-blocking manner:\r\n<pre>\r\ndict.asyncForEach(function(key,value,next) {\r\n  //returns key and value of each\r\n  next();\r\n});\r\n</pre>\r\n\r\nTo break and end looping:\r\n<pre>\r\ndict.asyncForEach(function(key,value,next) {\r\n  if (..logic..) return false;\r\n  next();\r\n});\r\n</pre>\r\n\r\n(Optional) You may also call a function once the asyncForEach loop is complete:\r\n<pre>\r\ndict.asyncForEach(function(key,value,next) {\r\n  next();\r\n}, function() {\r\n  //called once loop is complete\r\n});\r\n</pre>\r\n\r\n\r\n### Get Keys\r\nReturns an array of keys:\r\n<pre>\r\ndict.getKeys();\r\n</pre>\r\n\r\n\r\n\r\n# Full Example\r\n\r\n<pre>\r\nvar Dictionary = require('dictionaryjs');\r\n\r\nvar dict = new Dictionary();\r\n\r\n//Setting keys examples\r\ndict.set(\"key1\",\"value1\");\r\ndict.set(\"key2\",\"value2\");\r\ndict.set(\"1\",\"num1\");\r\ndict.set(\"2\",\"num2\");\r\ndict.set(\"3\",\"num3\");\r\ndict.set(\"4\",\"num4\");\r\ndict.set(\"obj\",{test:\"object\"});\r\ndict.set(\"arr\",[0,1,2,3]);\r\n\r\n//Delete key example\r\ndict.remove(\"2\");\r\ndict.remove(\"key2\");\r\n\r\n//Return length of dictionary\r\nconsole.log(\"Dictionary size=\"+dict.size());\r\n\r\n//Has key\r\nconsole.log(\"Dictionary contains key 5? \"+dict.has(5));\r\n\r\n//Get key examples\r\nconsole.log(\"Get key1=\"+dict.get(\"key1\"));\r\n\r\n//GetDefault example\r\nconsole.log(dict.getDefault(\"key3\",\"default value, not found\"));\r\n\r\n//For each looping example\r\ndict.forEach(function(key,value) {\r\n  console.log(key+\"=\"+value);\r\n});\r\n\r\n//To break within the loops\r\ndict.forEach(function(key,value) {\r\n  if (key==3) return false; //breaks if key is 3\r\n  console.log(key+\"=\"+value);\r\n});\r\n\r\n//Async for each looping example\r\ndict.asyncForEach(function(key,value,next) {\r\n  console.log(key+\"=\"+value);\r\n  next();\r\n},function() {\r\n  console.log(\"Async loop is complete!\");\r\n});\r\n\r\n//Async Empty\r\ndict.asyncEmpty(function() {\r\n  //dictionary should be empty\r\n  console.log(\"emptied, size:\" + dict.size());\r\n});\r\n\r\n</pre>\r\n\r\n\r\n# To Do\r\n* Use some kind of hashing function to store keys so non-strings may be supported.\r\n\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/phanxgames/dictionaryjs/issues"
  },
  "homepage": "https://github.com/phanxgames/dictionaryjs",
  "_id": "dictionaryjs@0.0.8",
  "_shasum": "cb239f6da50c4a1be668b61960af28188de010b6",
  "_from": "dictionaryjs@",
  "_resolved": "https://registry.npmjs.org/dictionaryjs/-/dictionaryjs-0.0.8.tgz"
}
