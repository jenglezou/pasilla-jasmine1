{
  "name": "keyword",
  "description": "Keyword-driven testing library",
  "version": "0.1.1",
  "homepage": "https://github.com/rap1ds/keyword",
  "author": {
    "name": "Mikko Koski",
    "email": "mikkokos@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rap1ds/keyword"
  },
  "bugs": {
    "url": "https://github.com/rap1ds/keyword/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rap1ds/keyword/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/keyword",
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "underscore": "1.4.x",
    "selenium-node-webdriver": "*"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "expect.js": "0.2.x",
    "grunt-mocha-test": "0.2.x",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.2"
  },
  "keywords": [
    "keyword",
    "testing",
    "atdd"
  ],
  "readme": "# Keyword.js\n\nA Keyword-driven testing library for node.\n\nThe library allows you to write low-level keywords that can be used for integration testing. By combining the low-level keywords, you can create new high-level keywords without any actual coding. Low-level keyword maps to a JavaScript function, where as high-level keyword contains only other high or low-level keywords.\n\n## Hello World example\n\nLet's write the first low-level keywords `Hello World`, which prints \"Hello World\" and `How are you?` which prints \"How are you?\", obviously.\n\n```javascript\n// lowlevel-keywords.js\n\nvar lowlevelKeywords = {\n    \"Hello World\": function(next) {\n        console.log(\"Hello World\");\n        next();\n    },\n    \"How are you?\": function(next) {\n        console.log(\"How are you?\");\n        next();\n    }\n};\n\nmodule.exports = lowlevelKeywords;\n```\n\nPretty simple stuff.\n\nLet's create our first high-level keyword `Greet the World`, which says hello and asks how is it going.\n\n```javascript\n// highlevel-keywords.js\n\nvar highlevelKeywords = {\n    \"Greet the World\": [\n        \"Hello World\",\n        \"How are you?\"\n    ]\n};\n\nmodule.exports = highlevelKeywords;\n```\n\nThe syntax is following: \n* Keywords are defined as a map (plain JavaScript object) of keyword name and a function (for low-level keywords) or an array of keywords to run (for high-level keywords)\n\nNext, we want to run our keywords. Here's the code that runs the keyword `Greet the World`:\n\n```javascript\n// basic.js\n\n// Require keyword library\nvar key = require('keyword');\n\n// Import keyword definitions\nkey(require('./lowlevel-keywords'));\nkey(require('./highlevel-keywords'));\n\nkey.run(\"Greet the World\").then(function() {\n    // All done.\n});\n```\n\nNow we can run the example by typing\n\n```bash\n$ node basic.js\n```\n\nOutput\n\n```bash\n> Hello World\n> How are you?\n```\n\n[Click here to see the whole example](examples/basic)\n\n## Keywords with params and return values\n\nIn the basic example, all the keyword were static. They didn't take any parameter nor did they return anything.\n\nBoth, low-level and high-level keywords can take parameters and return values.\n\nLet's define three low-level keyword: \n\n* `Print` takes `message` as a parameter and prints it to the console log. \n* `Hello` takes `name` and returns a string saying \"Hello\" and the name of the person.\n* `Join` takes two strings and joins them into one string, separated by a newline\n\n```javascript\n// lowlevel-keywords.js\n\nvar lowlevelKeywords = {\n    \"Print\": function(next, message) {\n        console.log(message);\n        next();\n    },\n    \"Hello\": function(next, name) {\n        var returnValue = \"Hello \" + name;\n        next(returnValue);\n    },\n    \"Join\": function(next, str1, str2) {\n        var returnValue = [str1, str2].join(\"\\n\");\n        next(returnValue);\n    }\n};\n\nmodule.exports = lowlevelKeywords;\n```\n\nAlright! Our low-level keywords look a lot more general compared to the keywords in the basic example!\n\nNow let's create some high-level keywords that give parameters to the low-level keywords and return something themselves. `Greet Mikko` generates a greeting message for `Mikko`.\n\n```javascript\n// high-level-keywords.js\n\nvar highlevelKeywords = {\n    \"Create a greeting\": [\n        \"Hello\", [\"$1\"], \"=> $helloMikko\",\n        \"Join\", [\"$helloMikko\", \"How are you?\"], \"=> $return\"\n    ],\n    \"Greet Mikko\": [\n        \"Create a greeting\", [\"Mikko\"], \"=> $greeting\",\n        \"Print\", \"$greeting\"\n    ]\n};\n\nmodule.exports = highlevelKeywords;\n```\n\nThe syntax is following: \n* Parameters are in an array\n* Parameter value can be either a variable or a primitive, like a number or string\n* `$1` stands for the first parameter of the high-level keyword\n* The name of the variable where the return value is saved is a string, that starts with a fat arrow `=>` following by a variable name\n* Variable names always start with dollar sign `$`\n\nAnd then the `runner.js` file, which is mostly the same as in the previous example.\n\n```javascript\n// keywords-with-parameters.js\n\n// Require keyword library\nvar key = require('keyword');\n\n// Import keyword definitions\nkey(require('./lowlevel-keywords'));\nkey(require('./highlevel-keywords'));\n\nkey.run(\"Greet Mikko\").then(function() {\n    // All done.\n});\n```\n\nNow we can run the example by typing\n\n```bash\n$ node keywords-with-parameters.js\n```\n\nOutput\n\n```bash\n> Hello Mikko\n> How are you?\n```\n\n[Click here to see the whole example](examples/keywords-with-parameters)\n\n## How does this relate to testing??\n\nOk, now you've seen how to define and use keywords, but I bet you're eager to know how does this make integration testing awesome!\n\nWeb application integration testing is usually done by treating the application as a black box which you interact through a browser. The test cases contain a lot of repeating tasks, such as clicking an element or filling in a form, etc. Keyword.js lets you define these repeating tasks as a general purpose low-level keywords, such as `Click`, `Fill Input`, `Navigate To URL`, etc.\n\nImaging you're testing an application which has users and the users are able to send messages to each other. Your task is to test sending message from a user Jane to user David.\n\nFirst thing you have to do is to login as a Jane. This can be done by navigation to the login page (using `Navigate To URL`). Then you have to fill in user credentials (using `Fill Input`) and click login button (`Click`). You can combine all these and create a new high-level keyword, `Login as`, which takes user name as a parameter.\n\nAfter that you'll do the messaging stuff, but then you need to assert that David really got the message. So how would you do that? Well, you can use the `Login as` keyword to login with David's account and see if the message arrived!\n\nI bet you can already see the point of keywords. By defining general purpose low-level keywords, you can easily combine them and create complex high-level keywords that will make your integration testing awesome!\n\n## How to interact with the browser?\n\nThe library doesn't care how you interact with the browser and what is the browser you're using. You can use for example [Zombie](http://zombie.labnotes.org/), but my favorite is [PhantomJS](http://phantomjs.org/) via [Selenium Node WebDriver](https://github.com/WaterfallEngineering/selenium-node-webdriver).\n\nIf you need to use a 'real' browser (Chrome, Firefox, IE, etc.) [WD.js](https://github.com/admc/wd) might help you. Haven't tried it, though.\n\nSee the [Google search without injector](examples/google-without-injector) below for PhantomJS via WebDriver example.\n\nTo run the example, you have to have PhantomJS running with WebDriver on port 4444. To do this, install PhantomJS and type\n\n```bash\n$ phantomjs --webdriver=4444 &\n```\n\n```javascript\nvar key = require('keyword');\nvar assert = require('assert');\n// This example uses WebDriver and PhantomJS\nvar webdriver = require('selenium-node-webdriver');\nvar session = webdriver();\n\n// Define keywords\nvar suite = {\n\n    /***** The main test case *****/\n    \"Test Google Search\": [\n        \"Google Search For\", [\"keyword driven testing\"], \"=> $searchResult\",\n        \"Should Equal\", [\"$searchResult\", \"Keyword-driven testing - Wikipedia, the free encyclopedia\"]\n    ],\n\n    /***** Define high-level keywords ******/\n    \"Google Search For\": [\n        \"Go To Page\", [\"http://google.com\"],\n        \"Fill Input By Name\", [\"q\", \"$1\"],\n        \"Click Element By Name\", [\"btnG\"],\n        \"Pick First Search Result\", \"=> $return\"\n    ],\n\n    \"Pick First Search Result\": [\n        \"Get Text Content Of First Tag\", [\"h3\"], \"=> $return\"\n    ],\n\n    /***** Define low-level keywords ******/\n    \"Go To Page\": function(next, url) {\n        session.then(function(driver) {\n            console.log(\"Going to\", url);\n            return driver.get(url);\n        }).done(next);\n    },\n\n    \"Fill Input By Name\": function(next, elementName, text) {\n        session.then(function(driver) {\n            return driver.\n                findElement(driver.webdriver.By.name(elementName)).\n                sendKeys(text);\n        }).done(next);\n    },\n\n    \"Click Element By Name\": function(next, elementName) {\n        session.then(function(driver) {\n            return driver.\n                findElement(driver.webdriver.By.name(elementName)).click();\n        }).done(next);\n    },\n\n    \"Get Text Content Of First Tag\": function(next, elementTagName) {\n        session.then(function(driver) {\n            return driver.executeScript(function(tag) {\n                // This script is run in browser context\n                return document.querySelector(tag).textContent;\n            }, elementTagName)\n            .then(function(firstHit) {\n                console.log(\"The first Google hit:\", firstHit);\n                return firstHit;\n            });\n        }).done(next);\n    },\n\n    \"Should Equal\": function(next, a, b) {\n        console.log(\"Should Equal: '\" + a + \"' and '\" + b + \"'\");\n        assert(a === b);\n        next();\n    }\n};\n\n// Load the keywords\nkey(suite);\n\nconsole.log();\n\n// Run the keyword\nkey.run(\"Test Google Search\").then(function() {\n    console.log(\"\\nDone.\\n\");\n    session.then(function(driver) {\n        driver.quit();\n    });\n});\n```\n\n## Cleaner code with injector\n\nAs you can see from the above example, hooking up a WebDriver session brings in some bloat code to each keyword. To get rid of the bloat, injector comes to help.\n\nAn injector is a function, that can execute before and after each keyword execution. Injector is also able to inject new parameters to the low-level keyword function.\n\nHere's the Google example with a WebDriver injector. As you can see, the injector adds a `driver` parameter to each keyword.\n\n```javascript\nvar key = require('keyword');\nvar assert = require('assert');\n\n// Define keywords\nvar suite = {\n\n    /***** The main test case *****/\n    \"Test Google Search\": [\n        \"Google Search For\", [\"keyword driven testing\"], \"=> $searchResult\",\n        \"Should Equal\", [\"$searchResult\", \"Keyword-driven testing - Wikipedia, the free encyclopedia\"],\n        \"Quit\"\n    ],\n\n    /***** Define high-level keywords ******/\n    \"Google Search For\": [\n        \"Go To Page\", [\"http://google.com\"],\n        \"Fill Input By Name\", [\"q\", \"$1\"],\n        \"Click Element By Name\", [\"btnG\"],\n        \"Pick First Search Result\", \"=> $return\"\n    ],\n\n    \"Pick First Search Result\": [\n        \"Get Text Content Of First Tag\", [\"h3\"], \"=> $return\"\n    ],\n\n    /***** Define low-level keywords ******/\n    \"Go To Page\": function(next, driver, url) {\n        console.log(\"Going to\", url);\n        driver\n        .get(url)\n        .then(next);\n    },\n\n    \"Fill Input By Name\": function(next, driver, elementName, text) {\n        driver\n        .findElement(driver.webdriver.By.name(elementName))\n        .sendKeys(text)\n        .then(next);\n    },\n\n    \"Click Element By Name\": function(next, driver, elementName) {\n        driver\n        .findElement(driver.webdriver.By.name(elementName))\n        .click()\n        .then(next);\n    },\n\n    \"Get Text Content Of First Tag\": function(next, driver, elementTagName) {\n        driver.executeScript(function(tag) {\n            // This script is run in browser context\n            return document.querySelector(tag).textContent;\n        }, elementTagName)\n        .then(function(firstHit) {\n            console.log(\"The first Google hit:\", firstHit);\n            return firstHit;\n        })\n        .then(next);\n    },\n\n    \"Should Equal\": function(next, driver, a, b) {\n        console.log(\"Should Equal: '\" + a + \"' and '\" + b + \"'\");\n        assert(a === b);\n        next();\n    },\n    \"Quit\": function(next, driver) {\n        driver.quit().then(next);\n    }\n};\n\n// Load the keywords\nkey(suite);\n\n// Inject webdriver\nkey.injector(key.webdriver);\n\nconsole.log();\n\n// Run the keyword\nkey.run(\"Test Google Search\").then(function() {\n    console.log(\"\\nDone.\\n\");\n});\n```\n\n## Examples\n\n[Basic example:](examples/basic)\n\n```bash\ncd examples/basic\nnpm install\nnode basic.js\n```\n\n[Keywords with parameters example:](examples/keywords-with-parameters)\n\n```bash\ncd examples/keywords-with-parameters\nnpm install\nnode keywords-with-parameters.js\n```\n\n[Google example (without injector):](examples/google-without-injector)\n\n```bash\ncd examples/google\nnpm install\nphantomjs --webdriver=4444 &\nnode google.js\n```\n\n[Google example:](examples/google)\n\n```bash\ncd examples/google\nnpm install\nphantomjs --webdriver=4444 &\nnode google.js\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\n\n## Inspiration\n\n* [Robot Framework](https://code.google.com/p/robotframework/)\n* [PhantomRobot](https://github.com/datakurre/phantomrobot)\n* [RoboZombie](https://github.com/mkorpela/RoboZombie)\n\n## License\nCopyright (c) 2013 Mikko Koski  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "keyword@0.1.1",
  "_shasum": "45b5617cdef2532c68c70609e9967b1f7c471149",
  "_from": "keyword@",
  "_resolved": "https://registry.npmjs.org/keyword/-/keyword-0.1.1.tgz"
}
